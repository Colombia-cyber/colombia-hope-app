// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  displayName String?
  avatar      String?
  bio         String?
  location    String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Authentication
  password    String?
  firebaseUid String?  @unique

  // Social relationships
  sentFriendRequests     Friendship[] @relation("FriendshipRequestSender")
  receivedFriendRequests Friendship[] @relation("FriendshipRequestReceiver")

  // Content
  posts       Post[]
  comments    Comment[]
  postLikes   PostLike[]
  
  // Notifications
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")

  @@map("users")
}

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  sender   User @relation("FriendshipRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendshipRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friendships")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    PostLike[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model PostLike {
  id     String @id @default(cuid())
  postId String
  userId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model News {
  id          String   @id @default(cuid())
  title       String
  content     String
  summary     String?
  imageUrl    String?
  source      String?
  category    String?
  tags        String[] // Array of tags
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("news")
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  title      String
  message    String
  read       Boolean          @default(false)
  senderId   String?
  receiverId String
  relatedId  String? // ID of related entity (post, comment, etc.)
  createdAt  DateTime         @default(now())

  sender   User? @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  receiver User  @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  POST_LIKE
  POST_COMMENT
  NEWS_UPDATE
  SYSTEM_UPDATE
}